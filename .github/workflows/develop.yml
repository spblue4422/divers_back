name: Divers Development
on:
  push:
    branches:
      - develop

  pull_request:
    branches:
      - develop

jobs:
  # test를 모두 통과하면 굳이 여기서 build를 하지 않아도 배포에 문제가 없음.
  # CI에서 test를 하고 CD로 넘어가서 배포를 하면 되는 구조
  # 근데 아직 test 코드가 없는 상황이니 먼저 build 해보고 넘기면 될듯.
  # CI:
  # test1
  # test2
  # test3
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Install depndencies
        run: yarn install

      - name: Build
        run: yarn run build

  CD-Build:
    needs: CI
    runs-on: ubuntu_latest

    steps:
      - name: Checkout branch
        uses: actions/chekcout@v4

      - name: Set up Docker buildx # 나중에 action 확인해보자
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub # 나중에 action 확인해보자
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image and push # 나중에 action 확인해보자
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: divers_back:latest
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  CD-Deploy:
    needs: CD-Build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATEKEY }}
          script: | # 밑에 bash 스크립트 내용 한 번 알아봅시다.
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=80-4000")

            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            sudo docker pull ${{ env.DOCKER_HUB }}
            sudo docker run --name ${{ env.CONTAINER_NAME }} -d -p 80:4000 -e TZ=Asia/Seoul ${{ env.DOCKER_HUB }}
