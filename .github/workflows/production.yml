name: Divers Prouction
on:
  push:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      # - name: test1
      # - name: test2
      # - name: test3

      - name: Install depndencies
        run: yarn install

      - name: Build
        run: yarn run build

  # CD-Build:
  #   needs: CI
  #   environment: prod
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v4

  #     - name: Create release branch
  #       uses: peterjgrainger/action-create-branch@v3

  #     - name: Create .env file
  #       run: |
  #         echo PORT=${{ secrets.PORT }} >> .prod.env
  #         echo DATABASE_HOST=${{ secrets.EC2_HOST }} >> .prod.env
  #         echo DATABASE_PORT=${{ secrets.DB_PORT }} >> .prod.env
  #         echo DATABASE_NAME=${{ secrets.DB_NAME }} >> .prod.env
  #         echo DATABASE_USER=${{ secrets.DB_USER }} >> .prod.env
  #         echo DATABASE_PASSWORD=${{ secrets.DB_PASSWORD }} >> .prod.env
  #         echo SECRETKEY=${{ secrets.SECRET_KEY }} >> .prod.env
  #         echo ACCESS_EXPIRED=${{ vars.ACCESS_EXPIRED }} >> .prod.env
  #         echo REFRESH_EXPIRED=${{ vars.REFRESH_EXPIRED }} >> .prod.env
  #         echo SWAGGER_ID=${{ secrets.SWAGGER_ID }} >> .prod.env
  #         echo SWAGGER_PASSWORD=${{ secrets.SWAGGER_PASSWORD }} >> .prod.env

  #     - name: Set up Docker buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Build Docker image and push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ vars.DOCKER_IMAGE }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # CD-Deploy:
  #   needs: CD-Build
  #   environment: prod
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Get Github Actions IP
  #       id: IP
  #       uses: haythem/public-ip@v1.3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.IAM_ACCESS_KEY }}
  #         aws-secret-access-key: ${{ secrets.IAM_SECRET_ACCESS_KEY }}
  #         aws-region: 'ap-northeast-2'

  #     - name: Add Github Actions IP to VPC
  #       id: AddIP
  #       run: |
  #         aws ec2 authorize-security-group-ingress \
  #             --group-id ${{ secrets.SECURITY_GROUP_ID }} \
  #             --protocol tcp \
  #             --port 22 \
  #             --cidr ${{ steps.IP.outputs.ipv4 }}/32
  #         if [ $? -eq 0 ]; then
  #           echo "suc=true" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_SSH_USERNAME }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           CONTAINER_ID=$(sudo docker ps -q --filter "name=${{ vars.DOCKER_CONTAINER }}")

  #           if [ ! -z $CONTAINER_ID ]; then
  #             sudo docker stop $CONTAINER_ID
  #             sudo docker rm $CONTAINER_ID
  #           fi

  #           sudo docker pull ${{ vars.DOCKER_IMAGE }}
  #           sudo docker run --name ${{ vars.DOCKER_CONTAINER }} -d -p 80:4000 -e TZ=Asia/Seoul ${{ vars.DOCKER_IMAGE }}

  #     - name: Remove Github Actions IP from VPC
  #       if: failure()
  #       run: |
  #         if [ ${{ steps.AddIP.outputs.suc }} ]; then
  #           aws ec2 revoke-security-group-ingress \
  #             --group-id ${{ secrets.SECURITY_GROUP_ID }} \
  #             --protocol tcp \
  #             --port 22 \
  #             --cidr ${{ steps.IP.outputs.ipv4 }}/32
  #         fi
